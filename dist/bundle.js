(()=>{"use strict";var n,t,e;!function(n){n[n.Veca=0]="Veca",n[n.Manja=1]="Manja"}(n||(n={})),function(n){n[n.Leva=0]="Leva",n[n.Desna=1]="Desna"}(t||(t={})),function(n){n[n.Trenutni=0]="Trenutni",n[n.Maksimalni=1]="Maksimalni"}(e||(e={}));var r=function(n,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,t){n.__proto__=t}||function(n,t){for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])},r(n,t)};function o(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}function i(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(n,u)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function u(n){var t="function"==typeof Symbol&&Symbol.iterator,e=t&&n[t],r=0;if(e)return e.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(n,t){var e="function"==typeof Symbol&&n[Symbol.iterator];if(!e)return n;var r,o,i=e.call(n),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(n){o={error:n}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function a(n,t,e){if(e||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return n.concat(r||Array.prototype.slice.call(t))}function s(n){return this instanceof s?(this.v=n,this):new s(n)}function l(n,t,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(n,t||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(n){o[n]&&(r[n]=function(t){return new Promise((function(e,r){i.push([n,t,e,r])>1||c(n,t)}))})}function c(n,t){try{(e=o[n](t)).value instanceof s?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(n){f(i[0][3],n)}var e}function a(n){c("next",n)}function l(n){c("throw",n)}function f(n,t){n(t),i.shift(),i.length&&c(i[0][0],i[0][1])}}Object.create,Object.create;var f=function(n){return n&&"number"==typeof n.length&&"function"!=typeof n};function h(n){return"function"==typeof n}function d(n){return h(null==n?void 0:n.then)}function p(n){var t=n((function(n){Error.call(n),n.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}var v=p((function(n){return function(t){n(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(n,t){return t+1+") "+n.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function y(n,t){if(n){var e=n.indexOf(t);0<=e&&n.splice(e,1)}}var b=function(){function n(n){this.initialTeardown=n,this.closed=!1,this._parentage=null,this._finalizers=null}return n.prototype.unsubscribe=function(){var n,t,e,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var s=u(i),l=s.next();!l.done;l=s.next())l.value.remove(this)}catch(t){n={error:t}}finally{try{l&&!l.done&&(t=s.return)&&t.call(s)}finally{if(n)throw n.error}}else i.remove(this);var f=this.initialTeardown;if(h(f))try{f()}catch(n){o=n instanceof v?n.errors:[n]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var p=u(d),y=p.next();!y.done;y=p.next()){var b=y.value;try{g(b)}catch(n){o=null!=o?o:[],n instanceof v?o=a(a([],c(o)),c(n.errors)):o.push(n)}}}catch(n){e={error:n}}finally{try{y&&!y.done&&(r=p.return)&&r.call(p)}finally{if(e)throw e.error}}}if(o)throw new v(o)}},n.prototype.add=function(t){var e;if(t&&t!==this)if(this.closed)g(t);else{if(t instanceof n){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(t)}},n.prototype._hasParent=function(n){var t=this._parentage;return t===n||Array.isArray(t)&&t.includes(n)},n.prototype._addParent=function(n){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(n),t):t?[t,n]:n},n.prototype._removeParent=function(n){var t=this._parentage;t===n?this._parentage=null:Array.isArray(t)&&y(t,n)},n.prototype.remove=function(t){var e=this._finalizers;e&&y(e,t),t instanceof n&&t._removeParent(this)},n.EMPTY=((t=new n).closed=!0,t),n;var t}(),m=b.EMPTY;function w(n){return n instanceof b||n&&"closed"in n&&h(n.remove)&&h(n.add)&&h(n.unsubscribe)}function g(n){h(n)?n():n.unsubscribe()}var _=null,x=null,S=void 0,I=!1,E=!1,T={setTimeout:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=T.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,a([n,t],c(e))):setTimeout.apply(void 0,a([n,t],c(e)))},clearTimeout:function(n){var t=T.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(n)},delegate:void 0};function k(n){T.setTimeout((function(){if(!_)throw n;_(n)}))}function L(){}var M=j("C",void 0,void 0);function j(n,t,e){return{kind:n,value:t,error:e}}var z=null;function O(n){if(I){var t=!z;if(t&&(z={errorThrown:!1,error:null}),n(),t){var e=z,r=e.errorThrown,o=e.error;if(z=null,r)throw o}}else n()}var P=function(n){function t(t){var e=n.call(this)||this;return e.isStopped=!1,t?(e.destination=t,w(t)&&t.add(e)):e.destination=U,e}return o(t,n),t.create=function(n,t,e){return new H(n,t,e)},t.prototype.next=function(n){this.isStopped?V(function(n){return j("N",n,void 0)}(n),this):this._next(n)},t.prototype.error=function(n){this.isStopped?V(j("E",void 0,n),this):(this.isStopped=!0,this._error(n))},t.prototype.complete=function(){this.isStopped?V(M,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,n.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(n){this.destination.next(n)},t.prototype._error=function(n){try{this.destination.error(n)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(b),A=Function.prototype.bind;function D(n,t){return A.call(n,t)}var B=function(){function n(n){this.partialObserver=n}return n.prototype.next=function(n){var t=this.partialObserver;if(t.next)try{t.next(n)}catch(n){C(n)}},n.prototype.error=function(n){var t=this.partialObserver;if(t.error)try{t.error(n)}catch(n){C(n)}else C(n)},n.prototype.complete=function(){var n=this.partialObserver;if(n.complete)try{n.complete()}catch(n){C(n)}},n}(),H=function(n){function t(t,e,r){var o,i,u=n.call(this)||this;return h(t)||!t?o={next:null!=t?t:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&E?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&D(t.next,i),error:t.error&&D(t.error,i),complete:t.complete&&D(t.complete,i)}):o=t,u.destination=new B(o),u}return o(t,n),t}(P);function C(n){var t;I?(t=n,I&&z&&(z.errorThrown=!0,z.error=t)):k(n)}function V(n,t){var e=x;e&&T.setTimeout((function(){return e(n,t)}))}var U={closed:!0,next:L,error:function(n){throw n},complete:L},F="function"==typeof Symbol&&Symbol.observable||"@@observable";function Y(n){return n}function G(n){return 0===n.length?Y:1===n.length?n[0]:function(t){return n.reduce((function(n,t){return t(n)}),t)}}var N=function(){function n(n){n&&(this._subscribe=n)}return n.prototype.lift=function(t){var e=new n;return e.source=this,e.operator=t,e},n.prototype.subscribe=function(n,t,e){var r,o=this,i=(r=n)&&r instanceof P||function(n){return n&&h(n.next)&&h(n.error)&&h(n.complete)}(r)&&w(r)?n:new H(n,t,e);return O((function(){var n=o,t=n.operator,e=n.source;i.add(t?t.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},n.prototype._trySubscribe=function(n){try{return this._subscribe(n)}catch(t){n.error(t)}},n.prototype.forEach=function(n,t){var e=this;return new(t=R(t))((function(t,r){var o=new H({next:function(t){try{n(t)}catch(n){r(n),o.unsubscribe()}},error:r,complete:t});e.subscribe(o)}))},n.prototype._subscribe=function(n){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(n)},n.prototype[F]=function(){return this},n.prototype.pipe=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return G(n)(this)},n.prototype.toPromise=function(n){var t=this;return new(n=R(n))((function(n,e){var r;t.subscribe((function(n){return r=n}),(function(n){return e(n)}),(function(){return n(r)}))}))},n.create=function(t){return new n(t)},n}();function R(n){var t;return null!==(t=null!=n?n:S)&&void 0!==t?t:Promise}function q(n){return h(n[F])}function K(n){return Symbol.asyncIterator&&h(null==n?void 0:n[Symbol.asyncIterator])}function J(n){return new TypeError("You provided "+(null!==n&&"object"==typeof n?"an invalid object":"'"+n+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var Q="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function W(n){return h(null==n?void 0:n[Q])}function X(n){return l(this,arguments,(function(){var t,e,r;return i(this,(function(o){switch(o.label){case 0:t=n.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,s(t.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,s(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,s(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function Z(n){return h(null==n?void 0:n.getReader)}function $(n){if(n instanceof N)return n;if(null!=n){if(q(n))return o=n,new N((function(n){var t=o[F]();if(h(t.subscribe))return t.subscribe(n);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(f(n))return r=n,new N((function(n){for(var t=0;t<r.length&&!n.closed;t++)n.next(r[t]);n.complete()}));if(d(n))return e=n,new N((function(n){e.then((function(t){n.closed||(n.next(t),n.complete())}),(function(t){return n.error(t)})).then(null,k)}));if(K(n))return nn(n);if(W(n))return t=n,new N((function(n){var e,r;try{for(var o=u(t),i=o.next();!i.done;i=o.next()){var c=i.value;if(n.next(c),n.closed)return}}catch(n){e={error:n}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}n.complete()}));if(Z(n))return nn(X(n))}var t,e,r,o;throw J(n)}function nn(n){return new N((function(t){(function(n,t){var e,r,o,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),e=function(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=u(n),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(e){t[e]=n[e]&&function(t){return new Promise((function(r,o){!function(n,t,e,r){Promise.resolve(r).then((function(t){n({value:t,done:e})}),t)}(r,o,(t=n[e](t)).done,t.value)}))}}}(n),i.label=1;case 1:return[4,e.next()];case 2:if((r=i.sent()).done)return[3,4];if(a=r.value,t.next(a),t.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=i.sent(),o={error:s},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(c=e.return)?[4,c.call(e)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(n,t){function e(n){try{o(f.next(n))}catch(n){t(n)}}function r(n){try{o(f.throw(n))}catch(n){t(n)}}function o(t){var o;t.done?n(t.value):(o=t.value,o instanceof l?o:new l((function(n){n(o)}))).then(e,r)}o((f=f.apply(a,s||[])).next())}))})(n,t).catch((function(n){return t.error(n)}))}))}function tn(n){return function(t){if(function(n){return h(null==n?void 0:n.lift)}(t))return t.lift((function(t){try{return n(t,this)}catch(n){this.error(n)}}));throw new TypeError("Unable to lift unknown Observable type")}}function en(n,t,e,r,o){return new rn(n,t,e,r,o)}var rn=function(n){function t(t,e,r,o,i,u){var c=n.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(n){try{e(n)}catch(n){t.error(n)}}:n.prototype._next,c._error=o?function(n){try{o(n)}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._error,c._complete=r?function(){try{r()}catch(n){t.error(n)}finally{this.unsubscribe()}}:n.prototype._complete,c}return o(t,n),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;n.prototype.unsubscribe.call(this),!e&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(P);function on(n,t){return tn((function(e,r){var o=0;e.subscribe(en(r,(function(e){r.next(n.call(t,e,o++))})))}))}function un(n,t,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=t.schedule((function(){e(),o?n.add(this.schedule(null,r)):this.unsubscribe()}),r);if(n.add(i),!o)return i}function cn(n,t,e){return void 0===e&&(e=1/0),h(t)?cn((function(e,r){return on((function(n,o){return t(e,n,r,o)}))($(n(e,r)))}),e):("number"==typeof t&&(e=t),tn((function(t,r){return function(n,t,e,r,o,i,u,c){var a=[],s=0,l=0,f=!1,h=function(){!f||a.length||s||t.complete()},d=function(n){return s<r?p(n):a.push(n)},p=function(n){s++;var o=!1;$(e(n,l++)).subscribe(en(t,(function(n){t.next(n)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)n=void 0,n=a.shift(),p(n);h()}catch(n){t.error(n)}var n})))};return n.subscribe(en(t,d,(function(){f=!0,h()}))),function(){}}(t,r,n,e)})))}var an=Array.isArray;var sn=["addListener","removeListener"],ln=["addEventListener","removeEventListener"],fn=["on","off"];function hn(n,t,e,r){if(h(e)&&(r=e,e=void 0),r)return hn(n,t,e).pipe((o=r,on((function(n){return function(n,t){return an(t)?n.apply(void 0,a([],c(t))):n(t)}(o,n)}))));var o,i=c(function(n){return h(n.addEventListener)&&h(n.removeEventListener)}(n)?ln.map((function(r){return function(o){return n[r](t,o,e)}})):function(n){return h(n.addListener)&&h(n.removeListener)}(n)?sn.map(dn(n,t)):function(n){return h(n.on)&&h(n.off)}(n)?fn.map(dn(n,t)):[],2),u=i[0],s=i[1];if(!u&&f(n))return cn((function(n){return hn(n,t,e)}))($(n));if(!u)throw new TypeError("Invalid event target");return new N((function(n){var t=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1<t.length?t:t[0])};return u(t),function(){return s(t)}}))}function dn(n,t){return function(e){return function(r){return n[e](t,r)}}}function pn(n){return void 0===n&&(n=1/0),cn(Y,n)}var vn=new N((function(n){return n.complete()}));function yn(n){return n[n.length-1]}function bn(n){return(t=yn(n))&&h(t.schedule)?n.pop():void 0;var t}function mn(n,t){return"number"==typeof yn(n)?n.pop():t}function wn(n,t){return void 0===t&&(t=0),tn((function(e,r){e.subscribe(en(r,(function(e){return un(r,n,(function(){return r.next(e)}),t)}),(function(){return un(r,n,(function(){return r.complete()}),t)}),(function(e){return un(r,n,(function(){return r.error(e)}),t)})))}))}function gn(n,t){return void 0===t&&(t=0),tn((function(e,r){r.add(n.schedule((function(){return e.subscribe(r)}),t))}))}function _n(n,t){if(!n)throw new Error("Iterable cannot be null");return new N((function(e){un(e,t,(function(){var r=n[Symbol.asyncIterator]();un(e,t,(function(){r.next().then((function(n){n.done?e.complete():e.next(n.value)}))}),0,!0)}))}))}function xn(n,t){return t?function(n,t){if(null!=n){if(q(n))return function(n,t){return $(n).pipe(gn(t),wn(t))}(n,t);if(f(n))return function(n,t){return new N((function(e){var r=0;return t.schedule((function(){r===n.length?e.complete():(e.next(n[r++]),e.closed||this.schedule())}))}))}(n,t);if(d(n))return function(n,t){return $(n).pipe(gn(t),wn(t))}(n,t);if(K(n))return _n(n,t);if(W(n))return function(n,t){return new N((function(e){var r;return un(e,t,(function(){r=n[Q](),un(e,t,(function(){var n,t,o;try{t=(n=r.next()).value,o=n.done}catch(n){return void e.error(n)}o?e.complete():e.next(t)}),0,!0)})),function(){return h(null==r?void 0:r.return)&&r.return()}}))}(n,t);if(Z(n))return function(n,t){return _n(X(n),t)}(n,t)}throw J(n)}(n,t):$(n)}function Sn(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];var e=bn(n),r=mn(n,1/0),o=n;return o.length?1===o.length?$(o[0]):pn(r)(xn(o,e)):vn}var In=function(n){function t(t,e){return n.call(this)||this}return o(t,n),t.prototype.schedule=function(n,t){return void 0===t&&(t=0),this},t}(b),En={setInterval:function(n,t){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=En.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,a([n,t],c(e))):setInterval.apply(void 0,a([n,t],c(e)))},clearInterval:function(n){var t=En.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(n)},delegate:void 0},Tn=function(n){function t(t,e){var r=n.call(this,t,e)||this;return r.scheduler=t,r.work=e,r.pending=!1,r}return o(t,n),t.prototype.schedule=function(n,t){if(void 0===t&&(t=0),this.closed)return this;this.state=n;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,t)),this.pending=!0,this.delay=t,this.id=this.id||this.requestAsyncId(r,this.id,t),this},t.prototype.requestAsyncId=function(n,t,e){return void 0===e&&(e=0),En.setInterval(n.flush.bind(n,this),e)},t.prototype.recycleAsyncId=function(n,t,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return t;En.clearInterval(t)},t.prototype.execute=function(n,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(n,t);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},t.prototype._execute=function(n,t){var e,r=!1;try{this.work(n)}catch(n){r=!0,e=n||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},t.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,y(r,this),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null,n.prototype.unsubscribe.call(this)}},t}(In),kn={now:function(){return(kn.delegate||Date).now()},delegate:void 0},Ln=function(){function n(t,e){void 0===e&&(e=n.now),this.schedulerActionCtor=t,this.now=e}return n.prototype.schedule=function(n,t,e){return void 0===t&&(t=0),new this.schedulerActionCtor(this,n).schedule(e,t)},n.now=kn.now,n}(),Mn=new(function(n){function t(t,e){void 0===e&&(e=Ln.now);var r=n.call(this,t,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(t,n),t.prototype.flush=function(n){var t=this.actions;if(this._active)t.push(n);else{var e;this._active=!0;do{if(e=n.execute(n.state,n.delay))break}while(n=t.shift());if(this._active=!1,e){for(;n=t.shift();)n.unsubscribe();throw e}}},t}(Ln))(Tn);function jn(n,t){return void 0===t&&(t=Mn),tn((function(e,r){var o=null,i=null,u=null,c=function(){if(o){o.unsubscribe(),o=null;var n=i;i=null,r.next(n)}};function a(){var e=u+n,i=t.now();if(i<e)return o=this.schedule(void 0,e-i),void r.add(o);c()}e.subscribe(en(r,(function(e){i=e,u=t.now(),o||(o=t.schedule(a,n),r.add(o))}),(function(){c(),r.complete()}),void 0,(function(){i=o=null})))}))}var zn="http://localhost:3000";function On(n){var t=Math.round(Math.random()*(n-1-1+1)+1);return fetch(zn+"/Countries/?id=".concat(t)).then((function(n){if(n.ok)return n.json();throw new Error("Drzava nije pronadjena")})).then((function(n){return n[0]})).catch((function(n){return console.log(n)}))}var Pn=function(n,t,e,r){return new(e||(e=Promise))((function(o,i){function u(n){try{a(r.next(n))}catch(n){i(n)}}function c(n){try{a(r.throw(n))}catch(n){i(n)}}function a(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(u,c)}a((r=r.apply(n,t||[])).next())}))},An=function(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(n,u)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};function Dn(n){for(var t=n.toString().split("").reverse(),e=[],r=0;r<t.length;r++)0!=r&&r%3==0?(e.push("."),e.push(t[r])):e.push(t[r]);return e.reverse().toString().replace(/,/gi,"")+" km²"}function Bn(n,e,r,o,i){return Pn(this,void 0,void 0,(function(){var u,c,a;return An(this,(function(s){switch(s.label){case 0:u=0,s.label=1;case 1:if(!(u<n.length))return[3,7];s.label=2;case 2:return c=n,a=u,[4,On(i)];case 3:c[a]=s.sent(),s.label=4;case 4:if(n[u].ime==e[t.Leva].innerHTML)return[3,2];s.label=5;case 5:e[u].innerHTML=n[u].ime,r[u].innerHTML=Dn(n[u].povrsina),o[u].src=n[u].zastava,s.label=6;case 6:return u++,[3,1];case 7:return r[t.Desna].style.visibility="hidden",[2]}}))}))}function Hn(n,r,o,i,u,c,a){a.score++,u[e.Trenutni].innerHTML=a.score.toString();var s=n.filter((function(n){return n.povrsina>0})).map((function(n){return n.id})),l=function(n,t,e){for(var r=n;r==n||r==t;)r=Math.round(Math.random()*(e-1-1+1)+1);return xn(fetch(zn+"/Countries/?id=".concat(r)).then((function(n){if(n.ok)return n.json();throw new Error("Drzava nije pronadjena")})).then((function(n){return n[0]})).catch((function(n){return console.log(n)})))}(s[t.Leva],s[t.Desna],c);l.subscribe((function(e){r[t.Leva].innerHTML=r[t.Desna].innerHTML,o[t.Leva].innerHTML=o[t.Desna].innerHTML,i[t.Leva].src=i[t.Desna].src,n[t.Leva]=n[t.Desna],n[t.Desna]=e,r[t.Desna].innerHTML=e.ime,o[t.Desna].innerHTML=Dn(e.povrsina),i[t.Desna].src=e.zastava,o[t.Desna].style.visibility="hidden"}))}function Cn(n,t,r,o,i,u,c){c.score>c.high_score&&(c.high_score=c.score,i[e.Maksimalni].innerHTML=c.high_score.toString(),localStorage.setItem("HighScore",c.high_score.toString())),c.score=0,i[e.Trenutni].innerHTML=c.score.toString(),Bn(n,t,r,o,u)}function Vn(e,r,o,i,u,c,a,s,l,f,h){u[t.Desna].style.visibility="visible",h[n.Manja].hidden=!0,h[n.Veca].hidden=!0,setTimeout((function(){switch(f){case n.Veca:r>=e?(Hn(o,i,u,c,a,s,l),Fn(h)):(alert("Pogresli ste !!!"),Cn(o,i,u,c,a,s,l),Fn(h));break;case n.Manja:if(!(r<=e)){alert("Pogresli ste !!!"),Cn(o,i,u,c,a,s,l),Fn(h);break}Hn(o,i,u,c,a,s,l),Fn(h)}}),1500)}function Un(){return Pn(this,void 0,void 0,(function(){return An(this,(function(n){switch(n.label){case 0:return[4,fetch("http://localhost:3000/Countries/").then((function(n){if(n.ok)return n.json();throw new Error("Drzava nije pronadjena")})).then((function(n){return n})).catch((function(n){return console.log(n)}))];case 1:return[2,n.sent().length]}}))}))}function Fn(n){n.forEach((function(n){return n.hidden=!1}))}var Yn,Gn,Nn=p((function(n){return function(){n(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Rn=function(n){function t(){var t=n.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return o(t,n),t.prototype.lift=function(n){var t=new qn(this,this);return t.operator=n,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new Nn},t.prototype.next=function(n){var t=this;O((function(){var e,r;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var o=u(t.currentObservers),i=o.next();!i.done;i=o.next())i.value.next(n)}catch(n){e={error:n}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}}))},t.prototype.error=function(n){var t=this;O((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=n;for(var e=t.observers;e.length;)e.shift().error(n)}}))},t.prototype.complete=function(){var n=this;O((function(){if(n._throwIfClosed(),!n.isStopped){n.isStopped=!0;for(var t=n.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var n;return(null===(n=this.observers)||void 0===n?void 0:n.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),n.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(n){return this._throwIfClosed(),this._checkFinalizedStatuses(n),this._innerSubscribe(n)},t.prototype._innerSubscribe=function(n){var t=this,e=this,r=e.hasError,o=e.isStopped,i=e.observers;return r||o?m:(this.currentObservers=null,i.push(n),new b((function(){t.currentObservers=null,y(i,n)})))},t.prototype._checkFinalizedStatuses=function(n){var t=this,e=t.hasError,r=t.thrownError,o=t.isStopped;e?n.error(r):o&&n.complete()},t.prototype.asObservable=function(){var n=new N;return n.source=this,n},t.create=function(n,t){return new qn(n,t)},t}(N),qn=function(n){function t(t,e){var r=n.call(this)||this;return r.destination=t,r.source=e,r}return o(t,n),t.prototype.next=function(n){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===e||e.call(t,n)},t.prototype.error=function(n){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===e||e.call(t,n)},t.prototype.complete=function(){var n,t;null===(t=null===(n=this.destination)||void 0===n?void 0:n.complete)||void 0===t||t.call(n)},t.prototype._subscribe=function(n){var t,e;return null!==(e=null===(t=this.source)||void 0===t?void 0:t.subscribe(n))&&void 0!==e?e:m},t}(Rn),Kn=function(n,t,e,r){return new(e||(e=Promise))((function(o,i){function u(n){try{a(r.next(n))}catch(n){i(n)}}function c(n){try{a(r.throw(n))}catch(n){i(n)}}function a(n){var t;n.done?o(n.value):(t=n.value,t instanceof e?t:new e((function(n){n(t)}))).then(u,c)}a((r=r.apply(n,t||[])).next())}))},Jn=function(n,t){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(n,u)}catch(n){i=[6,n],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},Qn=new Rn,Wn=[],Xn=[],Zn=[],$n=[],nt=[],tt=[],et=document.getElementById("KIme"),rt=document.getElementById("BtnPotvrdi"),ot=document.getElementById("myModal");function it(){return Kn(this,void 0,void 0,(function(){var r;return Jn(this,(function(o){switch(o.label){case 0:return Wn[t.Leva]=document.getElementById("leva_drzava_ime"),Wn[t.Desna]=document.getElementById("desna_drzava_ime"),Xn[t.Leva]=document.getElementById("leva_drzava_povrsina"),Xn[t.Desna]=document.getElementById("desna_drzava_povrsina"),$n[t.Leva]=document.getElementById("leva_drzava_zastava"),$n[t.Desna]=document.getElementById("desna_drzava_zastava"),nt[n.Veca]=document.getElementById("btn-veca"),nt[n.Manja]=document.getElementById("btn-manja"),Zn[e.Trenutni]=document.getElementById("br_poena"),Zn[e.Maksimalni]=document.getElementById("max_poena"),[4,Un()];case 1:for(Gn=o.sent(),r=0;r<2;r++)tt[r]=void 0;return Yn={score:0,high_score:0},[2]}}))}))}function ut(){var n;null==localStorage.getItem("username")?(localStorage.clear(),ot.style.display="block",function(n,t){return hn(t,"click").pipe((r=function(){return function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return xn(n,bn(n))}(n.value.toString())},tn((function(n,t){var e=null,o=!1,i=function(){return o&&!e&&t.complete()};n.subscribe(en(t,(function(n){null==e||e.unsubscribe(),$(r()).subscribe(e=en(t,(function(n){return t.next(n)}),(function(){e=null,i()})))}),(function(){o=!0,i()})))}))),(e=function(n){return n.length>3},tn((function(n,t){var r=0;n.subscribe(en(t,(function(n){return e.call(void 0,n,r++)&&t.next(n)})))}))));var e,r}(et,rt).pipe((n=Qn,tn((function(t,e){$(n).subscribe(en(e,(function(){return e.complete()}),L)),!e.closed&&t.subscribe(e)})))).subscribe((function(n){localStorage.setItem("username",n),null!=localStorage.getItem("username")&&(ot.style.display="none",document.getElementById("UserName").innerHTML=localStorage.getItem("username"),Qn.next(),Qn.complete())}))):document.getElementById("UserName").innerHTML=localStorage.getItem("username"),null!=localStorage.getItem("HighScore")&&(Yn.high_score=parseInt(localStorage.getItem("HighScore")),Zn[e.Maksimalni].innerHTML=Yn.high_score.toString())}window.onload=function(){return Kn(this,void 0,void 0,(function(){var e;return Jn(this,(function(r){switch(r.label){case 0:return[4,it()];case 1:return r.sent(),ut(),Bn(tt,Wn,Xn,$n,Gn),e=function(t){var e=hn(t[n.Veca],"click"),r=hn(t[n.Manja],"click"),o=hn(document.getElementById("desna_drzava_zastava"),"click"),i=hn(document.getElementById("leva_drzava_zastava"),"click");e=Sn(e,o),r=Sn(r,i);var u=[];return u[n.Veca]=e.pipe(jn(500)),u[n.Manja]=r.pipe(jn(500)),u}(nt),e[n.Veca].subscribe((function(){return Kn(this,void 0,void 0,(function(){return Jn(this,(function(e){return Vn(tt[t.Leva].povrsina,tt[t.Desna].povrsina,tt,Wn,Xn,$n,Zn,Gn,Yn,n.Veca,nt),[2]}))}))})),e[n.Manja].subscribe((function(){return Kn(this,void 0,void 0,(function(){return Jn(this,(function(e){return Vn(tt[t.Leva].povrsina,tt[t.Desna].povrsina,tt,Wn,Xn,$n,Zn,Gn,Yn,n.Manja,nt),[2]}))}))})),[2]}}))}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,