(()=>{"use strict";var t={d:(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},o:(t,n)=>Object.prototype.hasOwnProperty.call(t,n)};t.d({},{O7:()=>jt,OJ:()=>Bt,An:()=>Ht,oC:()=>qt});var n=function(){this.id=0,this.ime="",this.zastava="",this.povrsina=0},e=function(){this.score=0,this.high_score=0},r=function(t,n){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])},r(t,n)};function o(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function i(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}}function u(t){var n="function"==typeof Symbol&&Symbol.iterator,e=n&&t[n],r=0;if(e)return e.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function c(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,o,i=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(e=i.return)&&e.call(i)}finally{if(o)throw o.error}}return u}function a(t,n,e){if(e||2===arguments.length)for(var r,o=0,i=n.length;o<i;o++)!r&&o in n||(r||(r=Array.prototype.slice.call(n,0,o)),r[o]=n[o]);return t.concat(r||Array.prototype.slice.call(n))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}function l(t,n,e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=e.apply(t,n||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){o[t]&&(r[t]=function(n){return new Promise((function(e,r){i.push([t,n,e,r])>1||c(t,n)}))})}function c(t,n){try{(e=o[t](n)).value instanceof s?Promise.resolve(e.value.v).then(a,l):f(i[0][2],e)}catch(t){f(i[0][3],t)}var e}function a(t){c("next",t)}function l(t){c("throw",t)}function f(t,n){t(n),i.shift(),i.length&&c(i[0][0],i[0][1])}}Object.create,Object.create;var f=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function h(t){return"function"==typeof t}function d(t){return h(null==t?void 0:t.then)}var p,v=((p=function(t){return function(n){t(this),this.message=n?n.length+" errors occurred during unsubscription:\n"+n.map((function(t,n){return n+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=n}}((function(t){Error.call(t),t.stack=(new Error).stack}))).prototype=Object.create(Error.prototype),p.prototype.constructor=p,p);function y(t,n){if(t){var e=t.indexOf(n);0<=e&&t.splice(e,1)}}var b=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,n,e,r,o;if(!this.closed){this.closed=!0;var i=this._parentage;if(i)if(this._parentage=null,Array.isArray(i))try{for(var s=u(i),l=s.next();!l.done;l=s.next())l.value.remove(this)}catch(n){t={error:n}}finally{try{l&&!l.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}else i.remove(this);var f=this.initialTeardown;if(h(f))try{f()}catch(t){o=t instanceof v?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var p=u(d),y=p.next();!y.done;y=p.next()){var b=y.value;try{w(b)}catch(t){o=null!=o?o:[],t instanceof v?o=a(a([],c(o)),c(t.errors)):o.push(t)}}}catch(t){e={error:t}}finally{try{y&&!y.done&&(r=p.return)&&r.call(p)}finally{if(e)throw e.error}}}if(o)throw new v(o)}},t.prototype.add=function(n){var e;if(n&&n!==this)if(this.closed)w(n);else{if(n instanceof t){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(e=this._finalizers)&&void 0!==e?e:[]).push(n)}},t.prototype._hasParent=function(t){var n=this._parentage;return n===t||Array.isArray(n)&&n.includes(t)},t.prototype._addParent=function(t){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(t),n):n?[n,t]:t},t.prototype._removeParent=function(t){var n=this._parentage;n===t?this._parentage=null:Array.isArray(n)&&y(n,t)},t.prototype.remove=function(n){var e=this._finalizers;e&&y(e,n),n instanceof t&&n._removeParent(this)},t.EMPTY=((n=new t).closed=!0,n),t;var n}();function m(t){return t instanceof b||t&&"closed"in t&&h(t.remove)&&h(t.add)&&h(t.unsubscribe)}function w(t){h(t)?t():t.unsubscribe()}b.EMPTY;var g=null,_=null,x=void 0,S=!1,I=!1,E={setTimeout:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=E.delegate;return(null==o?void 0:o.setTimeout)?o.setTimeout.apply(o,a([t,n],c(e))):setTimeout.apply(void 0,a([t,n],c(e)))},clearTimeout:function(t){var n=E.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(t)},delegate:void 0};function T(t){E.setTimeout((function(){if(!g)throw t;g(t)}))}function k(){}var z=P("C",void 0,void 0);function P(t,n,e){return{kind:t,value:n,error:e}}var A=null,L=function(t){function n(n){var e=t.call(this)||this;return e.isStopped=!1,n?(e.destination=n,m(n)&&n.add(e)):e.destination=U,e}return o(n,t),n.create=function(t,n,e){return new B(t,n,e)},n.prototype.next=function(t){this.isStopped?C(function(t){return P("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?C(P("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?C(z,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(b),M=Function.prototype.bind;function O(t,n){return M.call(t,n)}var j=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var n=this.partialObserver;if(n.next)try{n.next(t)}catch(t){H(t)}},t.prototype.error=function(t){var n=this.partialObserver;if(n.error)try{n.error(t)}catch(t){H(t)}else H(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){H(t)}},t}(),B=function(t){function n(n,e,r){var o,i,u=t.call(this)||this;return h(n)||!n?o={next:null!=n?n:void 0,error:null!=e?e:void 0,complete:null!=r?r:void 0}:u&&I?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&O(n.next,i),error:n.error&&O(n.error,i),complete:n.complete&&O(n.complete,i)}):o=n,u.destination=new j(o),u}return o(n,t),n}(L);function H(t){var n;S?(n=t,S&&A&&(A.errorThrown=!0,A.error=n)):T(t)}function C(t,n){var e=_;e&&E.setTimeout((function(){return e(t,n)}))}var U={closed:!0,next:k,error:function(t){throw t},complete:k},Y="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(t){return t}function F(t){return 0===t.length?D:1===t.length?t[0]:function(n){return t.reduce((function(t,n){return n(t)}),n)}}var G=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(n){var e=new t;return e.source=this,e.operator=n,e},t.prototype.subscribe=function(t,n,e){var r,o=this,i=(r=t)&&r instanceof L||function(t){return t&&h(t.next)&&h(t.error)&&h(t.complete)}(r)&&m(r)?t:new B(t,n,e);return function(t){if(S){var n=!A;if(n&&(A={errorThrown:!1,error:null}),t(),n){var e=A,r=e.errorThrown,o=e.error;if(A=null,r)throw o}}else t()}((function(){var t=o,n=t.operator,e=t.source;i.add(n?n.call(i,e):e?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(n){t.error(n)}},t.prototype.forEach=function(t,n){var e=this;return new(n=N(n))((function(n,r){var o=new B({next:function(n){try{t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:n});e.subscribe(o)}))},t.prototype._subscribe=function(t){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(t)},t.prototype[Y]=function(){return this},t.prototype.pipe=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return F(t)(this)},t.prototype.toPromise=function(t){var n=this;return new(t=N(t))((function(t,e){var r;n.subscribe((function(t){return r=t}),(function(t){return e(t)}),(function(){return t(r)}))}))},t.create=function(n){return new t(n)},t}();function N(t){var n;return null!==(n=null!=t?t:x)&&void 0!==n?n:Promise}function R(t){return h(t[Y])}function q(t){return Symbol.asyncIterator&&h(null==t?void 0:t[Symbol.asyncIterator])}function J(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var K="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Q(t){return h(null==t?void 0:t[K])}function V(t){return l(this,arguments,(function(){var n,e,r;return i(this,(function(o){switch(o.label){case 0:n=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,s(n.read())];case 3:return e=o.sent(),r=e.value,e.done?[4,s(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,s(r)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function W(t){return h(null==t?void 0:t.getReader)}function X(t){if(t instanceof G)return t;if(null!=t){if(R(t))return o=t,new G((function(t){var n=o[Y]();if(h(n.subscribe))return n.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(f(t))return r=t,new G((function(t){for(var n=0;n<r.length&&!t.closed;n++)t.next(r[n]);t.complete()}));if(d(t))return e=t,new G((function(t){e.then((function(n){t.closed||(t.next(n),t.complete())}),(function(n){return t.error(n)})).then(null,T)}));if(q(t))return Z(t);if(Q(t))return n=t,new G((function(t){var e,r;try{for(var o=u(n),i=o.next();!i.done;i=o.next()){var c=i.value;if(t.next(c),t.closed)return}}catch(t){e={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}t.complete()}));if(W(t))return Z(V(t))}var n,e,r,o;throw J(t)}function Z(t){return new G((function(n){(function(t,n){var e,r,o,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return i(this,(function(i){switch(i.label){case 0:i.trys.push([0,5,6,11]),e=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,e=t[Symbol.asyncIterator];return e?e.call(t):(t=u(t),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(e){n[e]=t[e]&&function(n){return new Promise((function(r,o){!function(t,n,e,r){Promise.resolve(r).then((function(n){t({value:n,done:e})}),n)}(r,o,(n=t[e](n)).done,n.value)}))}}}(t),i.label=1;case 1:return[4,e.next()];case 2:if((r=i.sent()).done)return[3,4];if(a=r.value,n.next(a),n.closed)return[2];i.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=i.sent(),o={error:s},[3,11];case 6:return i.trys.push([6,,9,10]),r&&!r.done&&(c=e.return)?[4,c.call(e)]:[3,8];case 7:i.sent(),i.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,n){function e(t){try{o(f.next(t))}catch(t){n(t)}}function r(t){try{o(f.throw(t))}catch(t){n(t)}}function o(n){var o;n.done?t(n.value):(o=n.value,o instanceof l?o:new l((function(t){t(o)}))).then(e,r)}o((f=f.apply(a,s||[])).next())}))})(t,n).catch((function(t){return n.error(t)}))}))}function $(t){return function(n){if(function(t){return h(null==t?void 0:t.lift)}(n))return n.lift((function(n){try{return t(n,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function tt(t,n,e,r,o){return new nt(t,n,e,r,o)}var nt=function(t){function n(n,e,r,o,i,u){var c=t.call(this,n)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=e?function(t){try{e(t)}catch(t){n.error(t)}}:t.prototype._next,c._error=o?function(t){try{o(t)}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){n.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return o(n,t),n.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var e=this.closed;t.prototype.unsubscribe.call(this),!e&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},n}(L);function et(t,n){return $((function(e,r){var o=0;e.subscribe(tt(r,(function(e){r.next(t.call(n,e,o++))})))}))}function rt(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=n.schedule((function(){e(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function ot(t,n,e){return void 0===e&&(e=1/0),h(n)?ot((function(e,r){return et((function(t,o){return n(e,t,r,o)}))(X(t(e,r)))}),e):("number"==typeof n&&(e=n),$((function(n,r){return function(t,n,e,r,o,i,u,c){var a=[],s=0,l=0,f=!1,h=function(){!f||a.length||s||n.complete()},d=function(t){return s<r?p(t):a.push(t)},p=function(t){s++;var o=!1;X(e(t,l++)).subscribe(tt(n,(function(t){n.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<r;)t=void 0,t=a.shift(),p(t);h()}catch(t){n.error(t)}var t})))};return t.subscribe(tt(n,d,(function(){f=!0,h()}))),function(){}}(n,r,t,e)})))}var it=Array.isArray;var ut=["addListener","removeListener"],ct=["addEventListener","removeEventListener"],at=["on","off"];function st(t,n,e,r){if(h(e)&&(r=e,e=void 0),r)return st(t,n,e).pipe((o=r,et((function(t){return function(t,n){return it(n)?t.apply(void 0,a([],c(n))):t(n)}(o,t)}))));var o,i=c(function(t){return h(t.addEventListener)&&h(t.removeEventListener)}(t)?ct.map((function(r){return function(o){return t[r](n,o,e)}})):function(t){return h(t.addListener)&&h(t.removeListener)}(t)?ut.map(lt(t,n)):function(t){return h(t.on)&&h(t.off)}(t)?at.map(lt(t,n)):[],2),u=i[0],s=i[1];if(!u&&f(t))return ot((function(t){return st(t,n,e)}))(X(t));if(!u)throw new TypeError("Invalid event target");return new G((function(t){var n=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return t.next(1<n.length?n:n[0])};return u(n),function(){return s(n)}}))}function lt(t,n){return function(e){return function(r){return t[e](n,r)}}}function ft(t){return void 0===t&&(t=1/0),ot(D,t)}var ht=new G((function(t){return t.complete()}));function dt(t){return t[t.length-1]}function pt(t){return(n=dt(t))&&h(n.schedule)?t.pop():void 0;var n}function vt(t,n){return"number"==typeof dt(t)?t.pop():n}function yt(t,n){return void 0===n&&(n=0),$((function(e,r){e.subscribe(tt(r,(function(e){return rt(r,t,(function(){return r.next(e)}),n)}),(function(){return rt(r,t,(function(){return r.complete()}),n)}),(function(e){return rt(r,t,(function(){return r.error(e)}),n)})))}))}function bt(t,n){return void 0===n&&(n=0),$((function(e,r){r.add(t.schedule((function(){return e.subscribe(r)}),n))}))}function mt(t,n){if(!t)throw new Error("Iterable cannot be null");return new G((function(e){rt(e,n,(function(){var r=t[Symbol.asyncIterator]();rt(e,n,(function(){r.next().then((function(t){t.done?e.complete():e.next(t.value)}))}),0,!0)}))}))}function wt(t,n){return n?function(t,n){if(null!=t){if(R(t))return function(t,n){return X(t).pipe(bt(n),yt(n))}(t,n);if(f(t))return function(t,n){return new G((function(e){var r=0;return n.schedule((function(){r===t.length?e.complete():(e.next(t[r++]),e.closed||this.schedule())}))}))}(t,n);if(d(t))return function(t,n){return X(t).pipe(bt(n),yt(n))}(t,n);if(q(t))return mt(t,n);if(Q(t))return function(t,n){return new G((function(e){var r;return rt(e,n,(function(){r=t[K](),rt(e,n,(function(){var t,n,o;try{n=(t=r.next()).value,o=t.done}catch(t){return void e.error(t)}o?e.complete():e.next(n)}),0,!0)})),function(){return h(null==r?void 0:r.return)&&r.return()}}))}(t,n);if(W(t))return function(t,n){return mt(V(t),n)}(t,n)}throw J(t)}(t,n):X(t)}function gt(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var e=pt(t),r=vt(t,1/0),o=t;return o.length?1===o.length?X(o[0]):ft(r)(wt(o,e)):ht}var _t=function(t){function n(n,e){return t.call(this)||this}return o(n,t),n.prototype.schedule=function(t,n){return void 0===n&&(n=0),this},n}(b),xt={setInterval:function(t,n){for(var e=[],r=2;r<arguments.length;r++)e[r-2]=arguments[r];var o=xt.delegate;return(null==o?void 0:o.setInterval)?o.setInterval.apply(o,a([t,n],c(e))):setInterval.apply(void 0,a([t,n],c(e)))},clearInterval:function(t){var n=xt.delegate;return((null==n?void 0:n.clearInterval)||clearInterval)(t)},delegate:void 0},St=function(t){function n(n,e){var r=t.call(this,n,e)||this;return r.scheduler=n,r.work=e,r.pending=!1,r}return o(n,t),n.prototype.schedule=function(t,n){if(void 0===n&&(n=0),this.closed)return this;this.state=t;var e=this.id,r=this.scheduler;return null!=e&&(this.id=this.recycleAsyncId(r,e,n)),this.pending=!0,this.delay=n,this.id=this.id||this.requestAsyncId(r,this.id,n),this},n.prototype.requestAsyncId=function(t,n,e){return void 0===e&&(e=0),xt.setInterval(t.flush.bind(t,this),e)},n.prototype.recycleAsyncId=function(t,n,e){if(void 0===e&&(e=0),null!=e&&this.delay===e&&!1===this.pending)return n;xt.clearInterval(n)},n.prototype.execute=function(t,n){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var e=this._execute(t,n);if(e)return e;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,n){var e,r=!1;try{this.work(t)}catch(t){r=!0,e=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),e},n.prototype.unsubscribe=function(){if(!this.closed){var n=this.id,e=this.scheduler,r=e.actions;this.work=this.state=this.scheduler=null,this.pending=!1,y(r,this),null!=n&&(this.id=this.recycleAsyncId(e,n,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(_t),It={now:function(){return(It.delegate||Date).now()},delegate:void 0},Et=function(){function t(n,e){void 0===e&&(e=t.now),this.schedulerActionCtor=n,this.now=e}return t.prototype.schedule=function(t,n,e){return void 0===n&&(n=0),new this.schedulerActionCtor(this,t).schedule(e,n)},t.now=It.now,t}(),Tt=new(function(t){function n(n,e){void 0===e&&(e=Et.now);var r=t.call(this,n,e)||this;return r.actions=[],r._active=!1,r._scheduled=void 0,r}return o(n,t),n.prototype.flush=function(t){var n=this.actions;if(this._active)n.push(t);else{var e;this._active=!0;do{if(e=t.execute(t.state,t.delay))break}while(t=n.shift());if(this._active=!1,e){for(;t=n.shift();)t.unsubscribe();throw e}}},n}(Et))(St);function kt(t,n){return void 0===n&&(n=Tt),$((function(e,r){var o=null,i=null,u=null,c=function(){if(o){o.unsubscribe(),o=null;var t=i;i=null,r.next(t)}};function a(){var e=u+t,i=n.now();if(i<e)return o=this.schedule(void 0,e-i),void r.add(o);c()}e.subscribe(tt(r,(function(e){i=e,u=n.now(),o||(o=n.schedule(a,t),r.add(o))}),(function(){c(),r.complete()}),void 0,(function(){i=o=null})))}))}var zt="http://localhost:3000";var Pt=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{a(r.next(t))}catch(t){i(t)}}function c(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}a((r=r.apply(t,n||[])).next())}))},At=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}};function Lt(t){for(var n=t.toString().split("").reverse(),e=t.toString().split(""),r=0,o=0;o<n.length;o++,r++)0!=o&&o%3==0?(e[r]=".",e[r+1]=n[o],r++):e[r]=n[o];return e.reverse().toString().replace(/,/gi,"")+" km²"}function Mt(t,n,e,r){return Pt(this,void 0,void 0,(function(){var o,i,u;return At(this,(function(c){switch(c.label){case 0:o=0,c.label=1;case 1:if(!(o<t.length))return[3,7];c.label=2;case 2:return i=t,u=o,[4,(a=Math.round(7*Math.random()+1),fetch(zt+"/Countries/?id=".concat(a)).then((function(t){if(t.ok)return t.json();throw new Error("Drzava nije pronadjena")})).then((function(t){return t[0]})).catch((function(t){return console.log(t)})))];case 3:i[u]=c.sent(),c.label=4;case 4:if(t[o].ime==n[0].innerHTML)return[3,2];c.label=5;case 5:n[o].innerHTML=t[o].ime,e[o].innerHTML=Lt(t[o].povrsina),r[o].src=t[o].zastava,c.label=6;case 6:return o++,[3,1];case 7:return e[1].style.visibility="hidden",console.log("wat"),[2]}var a}))}))}function Ot(t,n,e,r,o,i,u){return Pt(this,void 0,void 0,(function(){var c;return At(this,(function(a){return c=new Promise((function(c,a){t>=n?c(function(t,n,e,r,o){jt.score++,o[0].innerHTML=jt.score.toString(),e[1].style.visibility="visible";var i=t.filter((function(t){return t.povrsina>0})).map((function(t){return t.id}));(function(t,n){for(var e=t;e==t||e==n;)e=Math.round(7*Math.random()+1);return wt(fetch(zt+"/Countries/?id=".concat(e)).then((function(t){if(t.ok)return t.json();throw new Error("Drzava nije pronadjena")})).catch((function(t){return console.log(t)})))})(i[0],i[1]).subscribe((function(o){setTimeout((function(){n[0].innerHTML=n[1].innerHTML,e[0].innerHTML=e[1].innerHTML,r[0].src=r[1].src,t[0]=t[1],t[1]=o[0],n[1].innerHTML=o[0].ime,e[1].innerHTML=Lt(o[0].povrsina),r[1].src=o[0].zastava,e[1].style.visibility="hidden"}),1e3)}))}(e,r,o,i,u)):(alert("greska"),a(function(t,n,e,r,o){jt.score>jt.high_score&&(jt.high_score=jt.score,o[1].innerHTML=jt.high_score.toString(),localStorage.setItem("HighScore",jt.high_score.toString())),jt.score=0,o[0].innerHTML=jt.score.toString(),Mt(t,n,e,r)}(e,r,o,i,u)))})),[2,c]}))}))}var jt,Bt,Ht,Ct=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function u(t){try{a(r.next(t))}catch(t){i(t)}}function c(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(u,c)}a((r=r.apply(t,n||[])).next())}))},Ut=function(t,n){var e,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(i){return function(c){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;u;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=n.call(t,u)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,c])}}},Yt=[],Dt=[],Ft=[],Gt=[],Nt=[],Rt=[],qt=document.getElementById("myModal");window.onload=function(){return Ct(this,void 0,void 0,(function(){var t;return Ut(this,(function(r){return function(){Ft[0]=document.getElementById("leva_drzava_ime"),Ft[1]=document.getElementById("desna_drzava_ime"),Gt[0]=document.getElementById("leva_drzava_povrsina"),Gt[1]=document.getElementById("desna_drzava_povrsina"),Dt[0]=document.getElementById("leva_drzava_zastava"),Dt[1]=document.getElementById("desna_drzava_zastava"),Yt[0]=document.getElementById("btn-veca"),Yt[1]=document.getElementById("btn-manja"),Nt[0]=document.getElementById("br_poena"),Nt[1]=document.getElementById("max_poena"),Bt=document.getElementById("BtnPotvrdi"),Ht=document.getElementById("KIme");for(var t=0;t<2;t++)Rt[t]=new n;jt=new e}(),null==localStorage.getItem("username")?qt.style.display="block":document.getElementById("UserName").innerHTML=localStorage.getItem("username"),null!=localStorage.getItem("HighScore")&&(jt.high_score=parseInt(localStorage.getItem("HighScore")),Nt[1].innerHTML=jt.high_score.toString()),u=st(Bt,"click").pipe((i=function(){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return wt(t,pt(t))}(Ht.value.toString())},$((function(t,n){var e=null,r=!1,o=function(){return r&&!e&&n.complete()};t.subscribe(tt(n,(function(t){null==e||e.unsubscribe(),X(i()).subscribe(e=tt(n,(function(t){return n.next(t)}),(function(){e=null,o()})))}),(function(){r=!0,o()})))}))),(o=function(t){return t.length>3},$((function(t,n){var e=0;t.subscribe(tt(n,(function(t){return o.call(void 0,t,e++)&&n.next(t)})))})))),u.subscribe((function(t){localStorage.setItem("username",t),null==localStorage.getItem("username")?qt.style.display="block":(qt.style.display="none",document.getElementById("UserName").innerHTML=localStorage.getItem("username"))})),Mt(Rt,Ft,Gt,Dt),t=function(t){var n=st(t[0],"click"),e=st(t[1],"click"),r=st(document.getElementById("desna_drzava_zastava"),"click"),o=st(document.getElementById("leva_drzava_zastava"),"click");n=gt(n,r),e=gt(e,o);var i=[];return i[0]=n.pipe(kt(500)),i[1]=e.pipe(kt(500)),i}(Yt),t[0].subscribe((function(){return Ct(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return[4,Ot(Rt[1].povrsina,Rt[0].povrsina,Rt,Ft,Gt,Dt,Nt)];case 1:return t.sent(),[2]}}))}))})),t[1].subscribe((function(){return Ct(this,void 0,void 0,(function(){return Ut(this,(function(t){switch(t.label){case 0:return[4,Ot(Rt[0].povrsina,Rt[1].povrsina,Rt,Ft,Gt,Dt,Nt)];case 1:return t.sent(),[2]}}))}))})),[2];var o,i,u}))}))}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,